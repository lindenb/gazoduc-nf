options {
STATIC=false;
}


PARSER_BEGIN(NFConfigParser)

package gazoduc.config;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.util.function.*;



public class NFConfigParser {

private static abstract class Param {
	Token doc=null;

	protected String getDescription() {
	  String c="";
		if(doc!=null) {
			Token t = doc;
			while(t!=null) {
				c+=t.image;
				t=t.next;
				}
			if(c.startsWith("/*")) {
				c=c.substring(1);
				while(c.startsWith("*")) c=c.substring(1);
				}
			while(c.endsWith("*/")) {
				c=c.substring(0,c.length()-1);
				while(c.endsWith("*"))c=c.substring(0,c.length()-1);
				}
			c=c.trim();
			}
		return c;
	 	}

	abstract void markdown(PrintStream pw,String prefix);
	}

private static class ObjectParam extends Param {
	Map<String,Param> map = new LinkedHashMap<>();
	@Override
	public String toString() {
		return comment(doc) +" "+map.toString();
		}
	@Override 
	void markdown(PrintStream pw,String prefix) { 
		for(final String k: map.keySet()) {
			map.get(k).markdown(pw,prefix.isEmpty()?k:prefix+"."+k);
		 	}
		}
		
	Set<String> keySet() { return map.keySet();}
	
	void put(String t,final Param p) {
		if(p instanceof ValueParam) {
			this.map.put(t,p);
			}
		else
			{
			ObjectParam x = (ObjectParam)this.map.get(t);
			if(x==null) {
				x=new ObjectParam();
				this.map.put(t,x);
				}
			
			final ObjectParam o  = ObjectParam.class.cast(p);
			for(final String t2:o.keySet()) {
				x.put(t2,o.map.get(t2));
				}
			}
		}
	
	}

private static class ValueParam extends Param {
	final String value;
	final Path source;

	ValueParam(final String s,final Path source) {
		this.value = s;
		this.source= source;
		}
	@Override
	public String toString() {
		return value;
		}
	@Override
	void markdown(PrintStream w,String name){
		w.print("| `--");
		w.print(name);
		w.print("` | ");
		w.print(getDescription());
		w.print(" | ");
		w.print(escapeMarkdown(value));
		w.print(" | `");
		w.print(source);
		w.println("` |");
		}
	}

private  Path path = null;
private  ObjectParam params=null;


NFConfigParser(final ObjectParam params, final Path path,final Reader r) throws IOException {
	this(r);
	this.params= params;
	this.path = path;
	}

private static String escapeMarkdown(final String s) {
	final StringBuilder sb = new StringBuilder(s.length());
	for(int i=0;i< s.length();i++) {
		char c = s.charAt(i);
		switch(c) {
			case '|' : sb.append("&#124;");break;
			default: sb.append(c); break;
			}
		}
	return sb.toString();
	}


private static void scanPath(final ObjectParam params, final Path path) throws IOException {
	System.err.println("[DEBUG] scanning "+path);
	final List<String > lines = Files.readAllLines(path);
	final Predicate<String> isStartSection = new Predicate<String>() {
		public boolean test(String s) {
		  	s=s.trim();
		  	return (s.startsWith("/*") || s.startsWith("//")) && s.contains("BEGIN_PARAMS");
			}
		};
	final Predicate<String> isEndSection = new Predicate<String>() {
		public boolean test(String s) {
		  	s=s.trim();
			return (s.startsWith("/*") || s.startsWith("//")) && s.contains("END_PARAMS");
			}
		};
	for(int i=0;i< lines.size();i++) {
		if(isStartSection.test(lines.get(i))) {
			lines.subList(0,i).clear();
			break;
			}
	 	}
	int state=1;
	int i=0;
	while(i<lines.size()) {
	 if(state==1 && isEndSection.test(lines.get(i))) {
		lines.remove(i);
		state=0;
		}
	 else if(state==0 && isStartSection.test(lines.get(i))) {
		lines.remove(i);
		state=1;
		}
	 else if(state==1 &&lines.get(i).trim().startsWith("process")) {
		lines.subList(i,lines.size()).clear();
		break;
	  	}
	 else
		 {
		 i++;
		 }
	 }
	try(Reader r= new StringReader(String.join("\n",lines))) { 
		final NFConfigParser p = new NFConfigParser(params,path,r);
		p.input();
		}
	catch(ParseException err) {
		throw new IOException(err);
	 	}
	}

private static String unescape(final String s) {
	if(s.startsWith("'") && s.endsWith("'")) return s.substring(1,s.length()-1);
	if(s.startsWith("\"") && s.endsWith("\"")) return s.substring(1,s.length()-1);
	return s;
	}


private static String comment(Token t) {
	List<String> L= new ArrayList<>();
	while(t!=null) {
		L.add(t.image);
		t=t.next;
		}
	return String.join(" ",L);
	}

public static void main(final String[] args) {
	try {
		final ObjectParam root=new ObjectParam();
		final PrintStream w= System.out;

		
		w.print("| ");
		w.print("Field");
		w.print(" | ");
		w.print("Description");
		w.print(" | ");
		w.print("Value");
		w.print(" | ");
		w.print("Source");
		w.println(" |");
		
		for(final String f: args) {
			NFConfigParser.scanPath(root,Paths.get(f));
			}
		
		root.markdown(w,"");
		}
	catch(Throwable err) {
		err.printStackTrace();
		System.exit(-1);		
		}
	}
}

PARSER_END(NFConfigParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN : {
< COMMENT : "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}




TOKEN : /* LITERALS */
{
  <BLOCK: "\"\"\""  (~[])* "\"\"\"" >
| <SINGLE_QUOTE_LITERAL: "\'" (~["\'"]|"\\" ~[])*"\'" >
| <DOUBLE_QUOTE_LITERAL: "\"" (~["\""]|"\\" ~[])*"\"" >
| <OBRACKET:"{">
| <CBRACKET:"}">
| <SEMICOLON:";">
| <DOT:".">
| <EQ:"=">
| <OPAR:"(" >
| <CPAR:")" >
| <#DIGIT: ["0"-"9"] >
| <INT: <DIGIT> (<DIGIT>)*>
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <DOUBLE: (<SIGN>)? (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?>
| <BOOLEAN: ("true"|"false")>
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <INCLUDE_CONFIG: "includeConfig">
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
}

public void input():{}
    {
    (any())*<EOF> {
    	}
    }

private void any(): {Map.Entry<String,ObjectParam> h;}
	{
	h=map() {
		for(final String k: h.getValue().keySet()) {
			this.params.put(k,h.getValue().map.get(k));
		}
		}|includeConfig()
	}

private void includeConfig(): {String f;}
	{
	<INCLUDE_CONFIG> (<OPAR > f=string() <CPAR> |  f=string()) (<SEMICOLON>)? {
		final Path p = this.path.getParent().resolve(f);
		try {
		  	NFConfigParser.scanPath(this.params,p);
			}
		catch(IOException err) {
			err.printStackTrace();
			System.exit(-1);
			}
		}
	}

private Map.Entry<String,ObjectParam> map(): {String title;Token t;Param v;final ObjectParam h=new ObjectParam();Map.Entry<String,ObjectParam> h2=null;List<String> chain = new ArrayList<>();} 
	{
	t=<IDENTIFIER> {title=t.image;h.doc = t.specialToken; } 
		 <OBRACKET> 
			(
			LOOKAHEAD(2) h2=map() {
				h.put(h2.getKey(),h2.getValue());
				}
			
			| t=<IDENTIFIER>  <EQ> v=value() {
					v.doc = t.specialToken;
					h.put(t.image,v);
					}
			)*
		
		
		<CBRACKET>  {	return new AbstractMap.SimpleEntry<String,ObjectParam>(title,h); }
	}


private Param value():{String s; Token t; ObjectParam m;} {
	(
	s=string() { return new ValueParam(s, this.path);}
	| t=<BOOLEAN> { return new ValueParam(t.image, this.path);}
	| t=<INT> { return new ValueParam(t.image, this.path);}
	| t=<DOUBLE> { return new ValueParam(t.image, this.path);}
	| t= <IDENTIFIER> (<DOT> <IDENTIFIER>)* { return new ValueParam("${"+t.image+"}", this.path);}
	)
	}
private String string() : {Token t;}
	{
	(
	t=<SINGLE_QUOTE_LITERAL> { return unescape(t.image);}
	| t=<DOUBLE_QUOTE_LITERAL> { return unescape(t.image);}
	| t=<BLOCK> {  return t.image.substring(3,t.image.length()-3); } 
	)
	}





