conda.enabled=true
conda.useMamba=true

params {
	annotations {


		/** repeat masker */
		rmsk {
			enabled = true
			hard_filter = false
			}
		/** vista enhancers */
		vista {
			enabled  = true
			}

		/** annotate with bcftools csq */
		bcftools_csq {
			enabled = true
			}
		
		/** CLINVAR */
		clinvar {
			enabled = true
			}

		/** simple repeats at UCSC */
		simpe_repeats {
			enabled = true
			hard_filter = false
			}

		/** shall we annote with snpeff ? */
		snpeff {
			enabled = true
			}

		/** FILTER SO */
		vcffilterso {
			enabled = true
			hard_filter = false
			soacn = "SO:0001629,SO:0001818"
			}
		
		/** data from REMAP  is a database of transcriptional regulators peaks derived from curated ChIP-seq, ChIP-exo, DAP-seq */
		remap {
			enabled = true
			}
	

		/** gnomad GENOME */
		gnomad_genome {
			enabled = true
			population = "AF_NFE"
			max_AF = 0.01
			hard_filter = false
			}


		/** gnomad sv */
		gnomadsv {
			enabled = true
			/** pop in gnomad SV */
			population = "POPMAX_AF"
			/** frequency in gnomadSV */
			min_AF = 0.1
			}

		/** CONTRAST */
		contrast {
			enabled = true
			}

		/** annotate with vcf polyx */
		polyx {
			enabled = true
			/** polyx treshold */
			size = 10
			}


		/** AVADA */
		avada {
			enabled = true
			}

		/** reg features */
		regfeatures {
			enabled = true
			}

		/** ELSEWHERE */
		elsewhere {
			enabled = true
			/** don't look/display if AC > x */
			max_ac  = 10
			/** path to the external VCFs */
			list = "NO_FILE"
			}

		/** data from the GENECC database */
		gencc {
			enabled = true
			}

		/** use data from greendb */
		greendb {
			enabled = true
			}

		/** data from Cardiovascular Gene Annotation */
		bhfucl {
			enabled = true
			}

		/** STRINGDB */
		stringdb {
			enabled = true
			version = "v12.0"
			treshold = 990
			}

		/** alpha missense */
		alphamissense {
			enabled = true
			}


		/** MONDO */
		mondo {
			enabled = true
			}

		/** SPLICEAI */
		spliceai {
			enabled = false
			/** distance for spliceAI */
			distance = 50

			/** flag variants if any score is above this score */
			highscore = 0.9

			/** dont eval splice AI if INFO/AC is greater than 'x' */
			max_ac = 5
			
			/** spliceAI previous scores as tabix CHROM/POS/REF/ALT/SPLICEAI */
			tabix_scores = "NO_FILE"
			}

		/** encode_ccre */
		encode_ccre {
			enabled = true
			}


		/** CADD */
		cadd {
			enabled = true
			}

		/** regulome */
		regulome {
			enabled = true
			}

		/** uORF-DB */
		uorfdb {
			enabled = true
			}

		/** revel */
		revel {
			enabled = true
			}
		/** mnv */
		mnv {
			enabled = false
			}


		/** data from the DISEASES database */
		with_diseases = true
		/** data from the ORGANIZER database */
		with_organizer = true
		/** data from GeneOntology */
		with_go = true
		/** wich terms from geneontology ? GO:0008016 : heart contraction */
		goTerms = "GO:0006936,GO:0022857,GO:0060047,GO:0003179,GO:0008016"





		/** keepSamplesInPed : if vcf is provided, keep samples present in the 2nd column of the pedigree */
		keepSamplesInPed = false

		/** annotate with dbsnp id */
		with_dbsnp_id = true

		/** extra parameters for bcftools */
		extraBcfTools = ""


		/** AD ratio */
		with_allelic_ratio = true
		softfilter_allelic_ratio = true
		allelic_ratio = 0.2

		/** low/high DP */
		with_DP = true
		softfilter_DP=true
		low_DP=10
		high_DP=300

		/* GQ genotype quality */
		with_GQ = true
		low_GQ = 90
		softfilter_GQ = true

		/* VEP : Ensembl Variant Effect Predictor */
		with_vep = true

		/* VEP + UTR */
		with_vep_utr = true
		
		/** GTF UTR */
		with_gtf_utr = false


		/** GNOMAD */

			/** gnomad EXOME */
			with_gnomad_exome = false


		/** VCFFILTERJDK CUSTOM expression  args1 because I might add more */
		vcffilterjdk_args1 = ""



		/** phastCons */
		with_phastCons = true

		/** phyloP */
		with_phyloP = true


		}


	}
