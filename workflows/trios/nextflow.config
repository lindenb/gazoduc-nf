plugins {
  id 'nf-boost'
}

boost {
  cleanup = false
}

params {
    // fasta defined in config
    // fai defined in config
    // dict defined in config
    samplesheet = null //required CSV file with header vcf[,idx,id]? 
    pedigree=null
    bed = null
    bams = null  //optional CSV file with (sample,bam,bai) used to plot igvreport for denovo mutations
    prefix="prefix"
    outdir="results"
    so_accession="SO:0001818,SO:0001629"
    af_gnomad = 0.01
    pop_gnomad = "AF_nfe"
    help=false
    igv_flanking = 100
    min_sv_len = 500
    max_sv_len = 1000000
    split_n_variants_args = "--variants-count 100000"
    /** first step of bigannotate : bcftools filter */
    annotate_view_args1 = "-m2 -M3 "
}


process {
errorStrategy = "terminate"

  withName : "BCFTOOLS_CONCAT" {
	cpus  = 20
	}

  withName : "CALL_DELLY|GENOTYPE_DELLY" {
    memory = {50.GB * task.attempt}
    ext.when = false
  }

  withName : "CLINVAR_DOWNLOAD" {
    ext.local_vcf={params.clinvar_vcf?:"NO_FILE"}
  }

  withName: "VEP_INSTALL_PLUGINS" {
    ext.plugins = "SpliceAI,LOEUF"
  }

  withName: "WORKFLOW_SNV:ANNOT_SNV:ANNOTATE" {
    array  = 100
    cpus = 10

    ext.view_args1 = { params.annotate_view_args1}
    ext.bcftools_norm_args = "--remove-duplicates --multiallelics -both --old-rec-tag MULTIALLELIC"
    ext.set_id = "%VKX"


    ext.vcffilerso_accessions= { params.so_accession?:""}
    ext.vcffilerso_args = "-r -R"

    ext.gnomadvcf = {params.gnomad?:""}
    ext.vcfgnomad_args ={" --bufferSize  1000 --min-af 0 --max-af ${params.af_gnomad} --fields ${params.pop_gnomad}"}
    // double escape because jvarkit bash wrapper
    ext.gnomad_filterjdk="  -e 'return variant.isNotFiltered() || variant.getFilters().stream().filter(F->!F.endsWith(\\\"_AC0\\\")).noneMatch(S->S.startsWith(\\\"GNOMAD_GENOME_\\\") || S.startsWith(\\\"GNOMAD_EXOME_\\\"));' "
  
    ext.vep_args={params.vep_args?:""}
    ext.with_vep_spliceai=true
    ext.vep_spliceai_snv = {params.vep_spliceai_snv?:""}
    ext.vep_spliceai_indel = {params.vep_spliceai_indel?:""}
    ext.with_vep_loeuf=true
    ext.vep_loeuf = {params.vep_loeuf?:""}
    ext.with_vep_gnomad = true
    ext.vep_gnomad_fields = "AF_afr,AF_ami,AF_amr,AF_asj,AF_eas,AF_fin,AF_nfe,AF_oth,AF_raw,AF_sas"

    ext.with_cadd = true
    ext.cadd =  {params.cadd}

  }


  withName : "WORKFLOW_SV:ANNOTATE_SV:VEP_GRCH38:APPLY_VEP" {
    ext.gnomad_max_af={(params.af_gnomad as double)*2.0} /* as it's for multiple pop, use a highr value, will be fixed later in JVARKIT_VCFGNOMAD */
  }

  withName : "INTERVAL_LIST_TO_BED" {
    ext.awk_filter = "(\$1 ~ /^(chr)?[XY0-9]+\$/)"
  }

  withName: "WORKFLOW_SNV:SPLIT_VCF:BED_CLUSTER" {
    ext.args = "--size 1Mb"
  }


   withName: "FILTER_SV" {
    ext.min_length = {params.min_sv_len}
    ext.max_length = {params.max_sv_len}
  }

withName: "SNPEFF_DOWNLOAD" {
	ext.snpeff_database_directory = {params.snpeff_database_directory}
  ext.snpeff_db =  {params.snpeff_db}
}


/*
	withName : "SCATTER_TO_BED:SCATTER_INTERVALS_BY_NS" {
		ext.output_type = "ACGT"
		ext.max_to_merge = 1
	}*/




  withName : "WORKFLOW_SV:DELLY:SCATTER_TO_BED:SCATTER_INTERVALS_BY_NS" {
    ext.output_type = "N"
		ext.max_to_merge = 1
  }

	withName : "SPLIT_N_VARIANTS" {
		ext.method  = {params.split_n_variants_args}
	}
    

  withName : "WORKFLOW_SNV:WORKFLOW_DENOVO_SNV:REPORT" {
      publishDir = [
          path:"${params.outdir}/SNV_DENOVO",
          saveAs: { filename -> "${params.prefix}$filename" },
          pattern : '*.{bcf,csi,vcf.gz,tbi,txt,tsv}',
          mode: "copy",
          overwrite : true
          ]
  }


  withName: "IGV_REPORTS" {
      ext.flanking={params.igv_flanking}
      publishDir = [
          path:"${params.outdir}/IGV",
          pattern : '*.{html}',
          mode: "copy",
          overwrite : true
          ]
    }

  withName: HET_COMPOSITE {
    publishDir = [
          path:"${params.outdir}/HETCOMPOSITE",
          pattern : '*.{bcf,csi,bed,txt}',
          saveAs: { filename -> "${params.prefix}$filename" },
          mode: "copy",
          overwrite : true
          ]
  }

withName: "COMPILE_VERSIONS"  {
    publishDir = [
          path:"${params.outdir}",
          pattern : '*.{tsv,txt}',
          saveAs: { filename -> "${params.prefix}$filename" },
          mode: "copy",
          overwrite : true
          ]
  }

 withName : "FILTER_DELLY" {
    publishDir = [
          path:"${params.outdir}/DELLY",
          pattern : '*.{bcf,csi,vcf.gz,tbi}',
          saveAs: { filename -> "${params.prefix}$filename" }, 
          mode: "copy",
          overwrite : true
          ]
   }

 withName: FILTER_SV {
    publishDir = [
          path:"${params.outdir}/SV",
          pattern : '*.{bcf,csi,vcf.gz,tbi}',
          saveAs: { filename -> "${params.prefix}$filename" },
          mode: "copy",
          overwrite : true
          ]
  }


  withName: "GATHER_IGV_REPORTS" {
        ext.title={params.prefix}
        ext.prefix={"archive"}
        publishDir = [
            [
            path:"${params.outdir}/IGV",
            pattern : '*.{html}',
            mode: "copy",
            overwrite : true
            ],
            [
            path:"${params.outdir}/IGV",
            pattern : '*.{zip}',
            saveAs: { filename -> "${params.prefix}$filename" },
            mode: "copy",
            overwrite : true
            ]
        ]
    }

withName: "SAMTOOLS_DEPTH_PLOT_COVERAGE" {
   publishDir = [
          path:"${params.outdir}/SV/PDF",
          pattern : '*.{pdf}',
          mode: "copy",
          overwrite : true
          ]
    }

  
withName: INDEX_FOR_PDFS {
   publishDir = [
          path:"${params.outdir}/SV/PDF",
          pattern : '*.html',
          mode: "copy",
          overwrite : true
          ]
    }
  
  withName: "MULTIQC" {
            publishDir = [
                    path: { "${params.outdir}/multiqc" },
                    mode: "copy",
                    pattern : '*.{zip}',
                    overwrite : true
                    ]
        }
      
  withName: "README" {
   publishDir = [
          path:"${params.outdir}",
          pattern : '*.md',
          mode: "copy",
          overwrite : true
          ]
    }
}
