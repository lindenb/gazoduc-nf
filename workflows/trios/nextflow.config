plugins {
  id 'nf-boost'
}

boost {
  cleanup = false
}

params {
    // fasta defined in config
    // fai defined in config
    // dict defined in config
    samplesheet = null //required CSV file with header vcf[,idx,id]? 
    pedigree=null
    bed = null
    bams = null  //optional CSV file with (sample,bam,bai) used to plot igvreport for denovo mutations
    prefix="prefix"
    outdir="results"
    so_accession="SO:0001818,SO:0001629"
    af_gnomad = 0.01
    help=false
    igv_flanking = 10
    min_sv_len = 500
    max_sv_len = 1000000
}


process {

  withName : "CALL_DELLY|GENOTYPE_DELLY" {
    memory = {50.GB * task.attempt}
  }

  withName : "WORKFLOW_SNV:CLINVAR:DOWNLOAD" {
    ext.local_vcf={params.clinvar_vcf?:"NO_FILE"}
  }

  withName : "WORKFLOW_SV:ANNOTATE_SV:VEP_GRCH38:APPLY_VEP" {
    ext.gnomad_max_af={(params.af_gnomad as double)*2.0} /* as it's for multiple pop, use a highr value, will be fixed later in JVARKIT_VCFGNOMAD */
  }

  withName : "INTERVAL_LIST_TO_BED" {
    ext.awk_filter = "(\$1 ~ /^(chr)?[XY0-9]+\$/)"
  }

  withName: "WORKFLOW_SNV:SPLIT_VCF:BED_CLUSTER" {
    ext.args = "--size 1Mb"
  }

  withName: "BCFTOOLS_NORM" {
    ext.args1 = "-m2 -M3"
    ext.set_id = "%VKX"
  }

   withName: "FILTER_SV" {
    ext.min_length = {params.min_sv_len}
    ext.max_length = {params.max_sv_len}
  }

withName: "WORKFLOW_SNV:APPLY_SNPEFF:DOWNLOAD" {
	ext.snpeff_database_directory = {params.snpeff_database_directory}
}


  withName: "WORKFLOW_SNV:APPLY_SNPEFF:ANNOTATE" {
    ext.accessions={params.so_accession}
    ext.args2="-r -R"
  }

  withName: "JVARKIT_VCFGNOMAD" {
    ext.max_af={params.af_gnomad}
    // double escape because jvarkit bash wrapper
    ext.filterjdk="  -e 'return variant.isNotFiltered() || variant.getFilters().stream().filter(F->!F.endsWith(\\\"_AC0\\\")).noneMatch(S->S.startsWith(\\\"GNOMAD_GENOME_\\\") || S.startsWith(\\\"GNOMAD_EXOME_\\\"));' "
  }


	withName : "WORKFLOW_SNV:SPLIT_VCF:SCATTER_TO_BED:SCATTER_INTERVALS_BY_NS" {
		ext.output_type = "ACGT"
		ext.max_to_merge = 1
	}


  withName : "WORKFLOW_SV:DELLY:SCATTER_TO_BED:SCATTER_INTERVALS_BY_NS" {
    ext.output_type = "N"
		ext.max_to_merge = 1
  }

	withName : "SPLIT_N_VARIANTS" {
		ext.method  = "--variants-count 10000"
	}
    

  withName : "WORKFLOW_SNV:WORKFLOW_DENOVO_SNV:REPORT" {
      publishDir = [
          path:"${params.outdir}/SNV_DENOVO",
          saveAs: { filename -> "${params.prefix}$filename" },
          pattern : '*.{bcf,csi,vcf.gz,tbi,txt,tsv}',
          mode: "copy",
          overwrite : true
          ]
  }


  withName: "IGV_REPORTS" {
      ext.flanking={params.igv_flanking}
      publishDir = [
          path:"${params.outdir}/IGV",
          pattern : '*.{html}',
          mode: "copy",
          overwrite : true
          ]
    }

  withName: HET_COMPOSITE {
    publishDir = [
          path:"${params.outdir}/HETCOMPOSITE",
          pattern : '*.{bcf,csi,bed,txt}',
          saveAs: { filename -> "${params.prefix}$filename" },
          mode: "copy",
          overwrite : true
          ]
  }

 withName : "FILTER_DELLY" {
    publishDir = [
          path:"${params.outdir}/DELLY",
          pattern : '*.{bcf,csi,vcf.gz,tbi}',
          saveAs: { filename -> "${params.prefix}$filename" }, 
          mode: "copy",
          overwrite : true
          ]
   }

 withName: FILTER_SV {
    publishDir = [
          path:"${params.outdir}/SV",
          pattern : '*.{bcf,csi,vcf.gz,tbi}',
          saveAs: { filename -> "${params.prefix}$filename" },
          mode: "copy",
          overwrite : true
          ]
  }


  withName: "GATHER_IGV_REPORTS" {
        ext.title={params.prefix}
        ext.prefix={"archive"}
        publishDir = [
            [
            path:"${params.outdir}/IGV",
            pattern : '*.{html}',
            mode: "copy",
            overwrite : true
            ],
            [
            path:"${params.outdir}/IGV",
            pattern : '*.{zip}',
            saveAs: { filename -> "${params.prefix}$filename" },
            mode: "copy",
            overwrite : true
            ]
        ]
    }

withName: "SAMTOOLS_DEPTH_PLOT_COVERAGE" {
   publishDir = [
          path:"${params.outdir}/SV/PDF",
          pattern : '*.{pdf}',
          mode: "copy",
          overwrite : true
          ]
    }
  
withName: INDEX_FOR_PDFS {
   publishDir = [
          path:"${params.outdir}/SV/PDF",
          pattern : '*.html',
          mode: "copy",
          overwrite : true
          ]
    }
}
