
class SampleInfo {
    final String sn;
    final Counter<String> counter = new Counter<>();

    
    SampleInfo(final String sn) {
        this.sn=sn;
        }
   
    }

final Map<String,SampleInfo> sn2info = new HashMap<>(header.getNGenotypeSamples());

for(String sn:header.getSampleNamesInOrder() ) {
	sn2info.put(sn,new SampleInfo(sn));
	}

stream().
    forEach(V->{
        for(Genotype gt: V.getGenotypes()) {
            if(!gt.isFiltered()) continue;
            sn2info.get(gt.getSampleName()).counter.incr(gt.getFilters());
            }
        })
	;
	

if(sn2info.values().stream().anyMatch(INFO->INFO.counter.getMaxCount().orElse(0L)>0L)) {
    java.io.PrintStream w = System.out;
    final Set<String> key = sn2info.values().stream().flatMap(V->V.count.keySet()).collect(Collectors.toSet());

    w.println("id: \"__ID__\"");
    w.println("section_name: \"__SECTION_NAME__\"");  
    w.println("description: \"__DESCRIPTION__\"");
    w.println("plot_type: \"bargraph\"");
    w.println("pconfig:");
    w.println("    id: \"__ID__.plot\"");
    w.println("    title: \"\"");
    w.println("    xlab: \"Sample\"");
    w.println("    ylab: \"Filters\"");
    w.println("data:");
    w.flush();
    

    for(SampleInfo si: sn2info.values()) {
        w.println("    "+si.sn+":");
        for(final String key: keys) {
            w.println("        "+key+": "+si.count(key));
            }
        }
    
    w.flush();
}